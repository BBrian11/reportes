// src/pages/NovedadesWizardPro.jsx
import React, { useEffect, useMemo, useState } from "react";
import Swal from "sweetalert2";
import "../../styles/novedades-form.css";

/* Firebase (modular) */
import { initializeApp, getApps } from "firebase/app";
import {
  getFirestore,
  collection,
  addDoc,
  updateDoc,
  getDocs,
  query,
  orderBy,
  Timestamp,
} from "firebase/firestore";
import {
  getStorage,
  ref as storageRef,
  uploadBytes,
  getDownloadURL,
} from "firebase/storage";

/* ‚ö†Ô∏è En producci√≥n us√° env vars (VITE_*, NEXT_PUBLIC_* o .env) */
const firebaseConfig = {
  apiKey: "AIzaSyCZcj7AOQoXHHn1vDiyoCQbDIQRMfvhOlA",
  authDomain: "reportesg3t.firebaseapp.com",
  projectId: "reportesg3t",
  storageBucket: "reportesg3t.firebasestorage.app",
  messagingSenderId: "571918948751",
  appId: "1:571918948751:web:055d012f4e1f3f8de5d3fa",
  measurementId: "G-P7T4BRND8L",
};
const app = getApps().length ? getApps()[0] : initializeApp(firebaseConfig);
const db = getFirestore(app);
const storage = getStorage(app);

/* ============ Cat√°logos ============ */
const OPERADORES = ["Operador 1", "Operador 2", "Operador 3", "Operador 4", "Operador 5", "Operador 6"];

const EVENTOS = {
  tgs: [
    "Ingreso de Personal (Apertura de Alarma)",
    "Salida de Personal (Cierre de Alarma)",
    "Corte de energ√≠a el√©ctrica",
    "Restauraci√≥n de energ√≠a el√©ctrica",
    "Evento Confirmado",
    "Evento NO confirmado (Falso positivo)",
    "Dispositivo CCTV fuera de l√≠nea",
  ],
  vtv: [
    "Corte de energ√≠a el√©ctrica",
    "Restauraci√≥n de energ√≠a el√©ctrica",
    "Evento Confirmado",
    "Evento NO confirmado (Falso positivo)",
    "Dispositivo CCTV fuera de l√≠nea",
    "Falla del servicio de internet",
  ],
  edificios: [
    "Puerta Mantenida Abierta (PMA)",
    "Puerta Forzada (Intrusi√≥n)",
    "Evento - Encargado",
    "Port√≥n Mantenido Abierto (PMA)",
    "Evento Confirmado",
    "Evento NO confirmado (Falso positivo)",
    "Puerta cerrada con llave",
    "Dispositivo CCTV fuera de l√≠nea",
    "Corte de energ√≠a el√©ctrica",
    "Restauraci√≥n de energ√≠a el√©ctrica",
    "Alarma de incendio",
    "Alarma Tamper",
    "Bot√≥n de p√°nico",
    "P√°nico de App",
    "C√≥digo de coacci√≥n",
  ],
  barrios: [
    "Corte de energ√≠a el√©ctrica",
    "Restauraci√≥n de energ√≠a el√©ctrica",
    "Evento Confirmado",
    "Evento NO confirmado (Falso positivo)",
    "Dispositivo CCTV fuera de l√≠nea",
    "Apertura de Alarma",
    "Falla del servicio de internet",
  ],
  otros: [
    "Evento Interno - Centro de Monitoreo",
    "Descarga de grabaciones",
    "Persona sospechosa detectada",
    "Veh√≠culo sospechoso detectado",
    "Objeto sospechoso detectado",
    "Ingreso NO autorizado en zona restringida",
    "Falla de red o comunicaci√≥n",
    "Falla en servidor de video",
    "Intento de sabotaje a la c√°mara",
    "Intento de sabotaje a la alarma",
    "Intento de sabotaje a cerradura electr√≥nica",
  ],
};

const LUGAR_LABEL = {
  tgs: "¬øEn qu√© Punto de Medici√≥n o Planta?",
  vtv: "¬øEn qu√© Planta?",
  edificios: "Seleccione el Edificio",
  barrios: "¬øEn qu√© barrio?",
  otros: "¬øEn qu√© lugar?",
};

const OPERADOR_NAME = {
  tgs: "operador-tgs",
  vtv: "operador-vtv",
  edificios: "operador-edificios",
  barrios: "operador-barrios",
  otros: "operador-otros",
};

const LUGAR_NAME = {
  tgs: "locaciones-tgs",
  vtv: "planta-vtv",
  edificios: "edificio",
  barrios: "barrio",
  otros: "otro",
};

const EVENTO_NAME = {
  tgs: "evento-tgs",
  vtv: "evento-vtv",
  edificios: "evento-edificio",
  barrios: "evento-barrios",
  otros: "evento-otros",
};

/* ============ SOP: gu√≠as operativas por evento ============ */
const SOP = {
  "Puerta Mantenida Abierta (PMA)": {
    def: "Puerta de acceso abierta m√°s tiempo del permitido.",
    pasos: [
      "Fijar c√°mara del acceso en la pantalla principal.",
      "Observar si hay ingreso de personas o actitud sospechosa.",
      "Contactar residente/encargado del √∫ltimo ingreso.",
      "Enviar WhatsApp solicitando cierre (si est√° habilitado).",
      "Si no responde en 5 min, llamar: residente ‚Üí encargado ‚Üí supervisor.",
      "Confirmar visualmente el cierre. Mantener c√°mara hasta cerrar.",
    ],
    registro: [
      "Hora de se√±al recibida",
      "Persona contactada o intentos",
      "Resoluci√≥n (cerr√≥ / no se ubic√≥ / escalado)",
    ],
    quick: { timers: [{ label: "Esperar respuesta (5 min)", sec: 300 }] },
  },
  "Port√≥n Mantenido Abierto (PMA)": {
    def: "Port√≥n vehicular permanece abierto m√°s del tiempo permitido.",
    pasos: [
      "Fijar c√°mara del port√≥n.",
      "Verificar tr√°nsito/cola y riesgos de intrusi√≥n.",
      "Contactar encargado y solicitar cierre inmediato.",
      "Si no responde en 5 min, escalar a supervisor.",
      "Confirmar cierre visualmente.",
    ],
    registro: ["Hora", "Contacto realizado", "Cierre confirmado / Escalamiento"],
    quick: { timers: [{ label: "Esperar respuesta (5 min)", sec: 300 }] },
  },
  "Puerta Forzada (Intrusi√≥n)": {
    def: "Apertura no autorizada con fuerza o sabotaje de sensor.",
    pasos: [
      "Verificar alerta en control de accesos.",
      "Fijar c√°mara y analizar: ingreso/da√±os/actitud.",
      "Si hay indicios de intrusi√≥n: activar protocolo.",
      "Notificar supervisor y llamar a 911/seguridad.",
      "Capturar evidencia (fotos/clip).",
      "Contactar residente responsable si se identifica.",
    ],
    registro: ["Hora exacta", "Identificaci√≥n posible", "Acciones (911, supervisor)", "Evidencia cargada"],
    quick: { warn: "‚ö†Ô∏è Intrusi√≥n: avisar fuerzas y supervisor de inmediato." },
  },
  "Ingreso de Personal (Apertura de Alarma)": {
    def: "Entrada de personal autorizado con apertura del sistema.",
    pasos: [
      "Validar contra cronograma de visitas/trabajos.",
      "Verificar en video identidad/indumentaria.",
      "Confirmar apertura normal (sin coacci√≥n).",
      "Registrar hora, nombre y motivo.",
    ],
    registro: ["Hora", "Nombre", "Motivo", "Observaciones"],
  },
  "Salida de Personal (Cierre de Alarma)": {
    def: "Desarme/cierre tras finalizar tareas.",
    pasos: ["Confirmar cierre sin anomal√≠as.", "Verificar retiro del personal.", "Puertas cerradas.", "Registrar salida."],
    registro: ["Hora exacta", "Nombre del personal", "Cierre OK"],
  },
  "Corte de energ√≠a el√©ctrica": {
    def: "Interrupci√≥n del suministro el√©ctrico.",
    pasos: [
      "Confirmar se√±al de corte.",
      "Verificar UPS y autonom√≠a estimada.",
      "Corroborar c√°maras/NVR/sensores afectados.",
      "Informar al supervisor si impacta m√∫ltiples equipos.",
    ],
    registro: ["Hora del corte", "Zona/equipos afectados", "Medidas tomadas", "Duraci√≥n (si aplica)"],
  },
  "Restauraci√≥n de energ√≠a el√©ctrica": {
    def: "Vuelve el suministro tras un corte.",
    pasos: [
      "Confirmar restauraci√≥n en sistema.",
      "Verificar funcionamiento de todos los dispositivos.",
      "Escalar a t√©cnica si hay anomal√≠as.",
      "Registrar normalizaci√≥n y continuidad de grabaci√≥n.",
    ],
    registro: ["Hora de restablecimiento", "Estado de sistemas", "Anomal√≠as"],
  },
  "Alarma de incendio": {
    def: "Se√±al de humo/gas/fuego.",
    pasos: [
      "Ubicar sensor exacto.",
      "Verificar c√°maras del sector.",
      "Si hay indicios: activar evacuaci√≥n y llamar bomberos.",
      "Notificar supervisor.",
      "Si no hay indicios: contactar responsable y verificar sensor.",
    ],
    registro: ["Ubicaci√≥n y sensor", "Observaci√≥n visual", "Acciones (bomberos/supervisor)", "Confirmado o descartado"],
    quick: { warn: "üî• Indicaciones reales ‚Üí activar protocolo y bomberos." },
  },
  "Alarma Tamper": {
    def: "Manipulaci√≥n f√≠sica de equipo (c√°mara/panel/sensor).",
    pasos: [
      "Identificar dispositivo y ubicaci√≥n.",
      "Verificar en video manipulaci√≥n.",
      "Si hay sabotaje: capturar imagen, escalar a supervisor y responsable.",
      "Si es t√©cnico: registrar y derivar a soporte.",
    ],
    registro: ["Dispositivo", "Imagen adjunta", "Resoluci√≥n (saboteo/t√©cnica/descartado)"],
  },
  "Evento Confirmado": {
    def: "Validado visual o telef√≥nicamente como real.",
    pasos: [
      "Reunir evidencia visual clara.",
      "Confirmar testimonio (llamada/app).",
      "Notificar supervisor y fuerzas si aplica.",
      "Registrar todos los pasos con detalle.",
    ],
    registro: ["Evidencia", "Hora/tipo", "Actuaciones realizadas"],
  },
  "Evento NO confirmado (Falso positivo)": {
    def: "Sin evidencia visual ni testimonio que confirme.",
    pasos: [
      "Revisar c√°mara/sensor.",
      "Confirmar que no hay actividad.",
      "Contactar responsable si aplica.",
      "Registrar falso positivo con detalles.",
    ],
    registro: ["Hora", "Elemento disparado", "Resultado de verificaci√≥n"],
  },
  "Descarga de grabaciones": {
    def: "Solicitud formal de registro audiovisual.",
    pasos: [
      "Validar autorizaci√≥n.",
      "Identificar c√°mara/fecha/hora exacta.",
      "Extraer desde DVR/NVR.",
      "Subir a Drive del cliente con etiqueta (fecha/hora/solicitante/sector).",
      "Entregar link.",
    ],
    registro: ["Autorizante", "Detalles del evento", "Medio de entrega", "Confirmaci√≥n de entrega"],
  },
  "Dispositivo CCTV fuera de l√≠nea": {
    def: "C√°mara sin transmisi√≥n.",
    pasos: [
      "Confirmar p√©rdida en el sistema.",
      "Identificar c√°mara/ubicaci√≥n.",
      "Verificar si el resto del sistema funciona.",
      "Si punto cr√≠tico: avisar supervisor y t√©cnica.",
      "Si no: monitorear 10 min; si persiste, escalar a t√©cnico.",
    ],
    registro: ["Hora", "Ubicaci√≥n", "Estado del sistema", "Notificaciones"],
  },
  "Bot√≥n de p√°nico": {
    def: "Activaci√≥n de pulsador f√≠sico.",
    pasos: [
      "Confirmar dispositivo activado.",
      "Visualizar zona por c√°mara.",
      "Contactar de inmediato al usuario (si est√° permitido).",
      "Si no responde o hay sospecha: fuerzas y supervisor.",
      "Guardar evidencia visual.",
    ],
    registro: ["Hora", "Usuario (si se identifica)", "Acci√≥n tomada", "Fuerza notificada"],
  },
  "P√°nico de App": {
    def: "P√°nico desde aplicaci√≥n m√≥vil.",
    pasos: [
      "Confirmar geolocalizaci√≥n y emisor.",
      "Verificar c√°mara si es domicilio o contactar usuario.",
      "Si hay duda/sin respuesta: supervisor y fuerzas locales.",
      "Registrar secuencia exacta.",
    ],
    registro: ["Hora", "Ubicaci√≥n", "Usuario", "Medios de contacto", "Resultado final"],
  },
  "C√≥digo de coacci√≥n": {
    def: "C√≥digo bajo amenaza: alerta silenciosa.",
    pasos: [
      "No contactar a la persona.",
      "Observar c√°maras de forma discreta.",
      "Notificar inmediatamente a fuerzas y supervisor.",
      "Mantener evidencia visual hasta cierre del caso.",
    ],
    registro: ["Hora", "Ubicaci√≥n", "Fuerzas contactadas", "Resultado"],
    quick: { warn: "üîï Alerta silenciosa. NO contactar a la v√≠ctima." },
  },
  "Evento Interno - Centro de Monitoreo": {
    def: "Situaci√≥n operativa interna (cambio guardia/incidente).",
    pasos: [
      "Documentar qu√© ocurri√≥ con hora/personas involucradas.",
      "Informar al supervisor si corresponde.",
      "Guardar registro si es grave.",
    ],
    registro: ["Detalle completo", "Firma operador", "Firma supervisor (si aplica)"],
  },
  "Puerta cerrada con llave": {
    def: "Puerta queda cerrada desde el interior.",
    pasos: [
      "Confirmar en c√°mara o por aviso.",
      "Verificar si es acci√≥n habitual/horario.",
      "Si no est√° autorizado: contactar responsable.",
      "Descartar emergencia y registrar resultado.",
    ],
    registro: ["Hora", "Qui√©n reporta/responde", "Resultado"],
  },
  "Persona sospechosa detectada": {
    def: "Individuo con actitud inusual.",
    pasos: [
      "Ubicar c√°mara y hacer seguimiento.",
      "Tomar capturas/clip.",
      "Notificar supervisor y seguridad.",
      "Informar al responsable del sitio.",
    ],
    registro: ["Hora", "Ubicaci√≥n", "Descripci√≥n", "Medidas adoptadas"],
  },
  "Veh√≠culo sospechoso detectado": {
    def: "Veh√≠culo en zona no autorizada o actitud inusual.",
    pasos: [
      "Identificar ubicaci√≥n/direcci√≥n.",
      "Seguir en c√°maras cercanas.",
      "Capturar patente/conductor si es posible.",
      "Informar a supervisor y encargado; fuerzas si corresponde.",
    ],
    registro: ["Hora/lugar", "Tipo/color", "Patente", "Acciones realizadas"],
  },
  "Objeto sospechoso detectado": {
    def: "Elemento abandonado en zona sensible.",
    pasos: [
      "Ver origen en c√°maras.",
      "Notificar supervisor de inmediato.",
      "Registrar y escalar; fuerzas especializadas si aplica.",
    ],
    registro: ["Hora/descripcion", "Lugar", "Persona relacionada", "Acciones"],
  },
  "Ingreso NO autorizado en zona restringida": {
    def: "Acceso a sector prohibido o con permiso especial.",
    pasos: [
      "Confirmar por c√°mara.",
      "Ver si us√≥ tarjeta/c√≥digo o fuerza.",
      "Notificar supervisor y seguridad f√≠sica.",
      "Registrar evidencia y descripci√≥n.",
    ],
    registro: ["Hora", "Identidad (si se detecta)", "Medio de acceso", "Acciones tomadas"],
  },
  "Falla de red o comunicaci√≥n": {
    def: "P√©rdida de conectividad (servidores/c√°maras/paneles).",
    pasos: [
      "Confirmar p√©rdida en gestor de red.",
      "Definir si es total/parcial.",
      "Escalar a redes.",
      "Evaluar impacto sobre monitoreo/gravaci√≥n.",
      "Informar al supervisor.",
    ],
    registro: ["Hora", "Elementos afectados", "Causa (si se sabe)", "Tiempo de recuperaci√≥n"],
  },
  "Falla en servidor de video": {
    def: "Interrupci√≥n en unidad central de grabaci√≥n/gesti√≥n.",
    pasos: [
      "Confirmar falla (sin acceso/errores).",
      "Notificar soporte t√©cnico.",
      "Verificar c√°maras en vivo: continuar monitoreo.",
      "Evaluar p√©rdida de grabaciones.",
      "Registrar urgente al supervisor.",
    ],
    registro: ["Hora", "Estado general", "C√°maras afectadas", "Escalamiento t√©cnico"],
  },
  "Intento de sabotaje a la c√°mara": {
    def: "Desenfoque/giro/bloqueo/vandalismo.",
    pasos: [
      "Detectar manipulaci√≥n visual o por Tamper.",
      "Capturar imagen de momento exacto.",
      "Notificar supervisor y seguridad.",
      "Registrar c√°mara y acciones.",
    ],
    registro: ["Ubicaci√≥n", "Tipo de sabotaje", "Evidencia", "Acciones"],
  },
  "Intento de sabotaje a la alarma": {
    def: "Corte/apertura/anulaci√≥n de sensor/sirena/central.",
    pasos: [
      "Confirmar se√±al de Tamper o interrupci√≥n.",
      "Verificar si el sistema sigue operativo.",
      "Visualizar c√°maras por actividad sospechosa.",
      "Notificar supervisor y t√©cnico de turno.",
    ],
    registro: ["Elemento/ Zona", "Hora/Observaci√≥n", "Resoluci√≥n t√©cnica"],
  },
  "Intento de sabotaje a cerradura electr√≥nica": {
    def: "Manipulaci√≥n forzada de cerradura motorizada/electr√≥nica.",
    pasos: [
      "Confirmar error/se√±al de apertura forzada.",
      "Visualizar c√°mara del acceso.",
      "Si hay sabotaje: supervisor + seguridad + evidencia.",
      "Si no hay actividad: derivar a mantenimiento.",
    ],
    registro: ["Hora", "Tipo/ubicaci√≥n", "Identificado (si aplica)", "Acciones y resoluci√≥n"],
  },
};

/* ========= Utiles ========= */
const getArgentinaTimestamp = () => Timestamp.fromDate(new Date());
const normalizar = (txt) =>
  (txt || "").toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "").trim();

/* ========= Componente ========= */
export default function NovedadesWizardPro() {
  const [step, setStep] = useState(0);
  const [categoria, setCategoria] = useState(null);
  const [estado, setEstado] = useState("pendiente");

  const [clientes, setClientes] = useState({
    tgs: [],
    vtv: [],
    edificios: [],
    barrios: [],
    otros: [],
  });

  const [search, setSearch] = useState("");
  const [form, setForm] = useState({
    operador: "-",
    lugar: "-",
    evento: "-",
    fechaHoraEvento: "",
    unidad: "",
    zona: "",
    proveedorPersonal: "",
    linkDrive: "",
    observaciones: "",
    imagenes: null,
  });

  /* Checklist de SOP tildado por evento (se resetea al cambiar de evento) */
  const [sopCheck, setSopCheck] = useState({}); // { [evento]: { pasos:[bool], registro:[bool] } }
  const currentSOP = SOP[form.evento] || null;

  /* Cargar clientes */
  useEffect(() => {
    (async () => {
      try {
        const qy = query(collection(db, "clientes"), orderBy("nombre", "asc"));
        const snap = await getDocs(qy);
        const next = { tgs: [], vtv: [], edificios: [], barrios: [], otros: [] };
        snap.forEach((doc) => {
          const data = doc.data();
          const c = (data.categoria || "").trim().toLowerCase();
          const nombre = data.nombre || "";
          if (c === "locaciones-tgs" || c === "tgs") next.tgs.push(nombre);
          else if (c === "planta-vtv" || c === "vtv") next.vtv.push(nombre);
          else if (c === "edificios" || c === "edificio") next.edificios.push(nombre);
          else if (c === "barrio" || c === "barrios") next.barrios.push(nombre);
          else if (c === "otro" || c === "otros") next.otros.push(nombre);
        });
        setClientes(next);
      } catch (err) {
        console.error(err);
        Swal.fire("Error", "No se pudieron cargar los clientes", "error");
      }
    })();
  }, []);

  /* Opciones filtradas para ‚Äúlugar‚Äù */
  const opcionesLugar = useMemo(() => {
    if (!categoria) return [];
    const pool =
      categoria === "barrios"
        ? clientes.barrios
        : categoria === "edificios"
        ? clientes.edificios
        : categoria === "vtv"
        ? clientes.vtv
        : categoria === "tgs"
        ? clientes.tgs
        : clientes.otros;
    return (pool || []).filter((n) => n.toLowerCase().includes(search.toLowerCase()));
  }, [categoria, clientes, search]);

  /* Validaciones por paso */
  const validarPaso = () => {
    if (step === 0 && !categoria) return warn("Eleg√≠ una categor√≠a para continuar.");
    if (step === 1) {
      if (!form.operador || form.operador === "-") return warn("Seleccion√° el operador.");
      if (!form.lugar || form.lugar === "-") return warn("Seleccion√° el lugar.");
    }
    if (step === 2) {
      if (!form.evento || form.evento === "-") return warn("Seleccion√° el tipo de evento.");
      if (categoria === "edificios" && !form.fechaHoraEvento)
        return warn("Indic√° fecha y hora reales del evento.");
    }
    return true;
  };
  const warn = (m) => {
    Swal.fire("Faltan datos", m, "warning");
    return false;
  };

  const handleNext = () => {
    if (!validarPaso()) return;
    setStep((s) => Math.min(s + 1, 4));
  };
  const handleBack = () => setStep((s) => Math.max(s - 1, 0));

  /* Guardado */
  const eventoTimestampFromLocal = (value) => {
    if (!value) return null;
    const [datePart, timePart] = value.split("T");
    if (!datePart || !timePart) return null;
    const [y, m, d] = datePart.split("-").map(Number);
    const [hh, mm] = timePart.split(":").map(Number);
    const localDate = new Date(y, m - 1, d, hh, mm, 0, 0);
    if (isNaN(localDate.getTime())) return null;
    return {
      ts: Timestamp.fromDate(localDate),
      local: value,
      iso: localDate.toISOString(),
    };
  };

  const subirImagenes = async (fileList, categoriaKey, docId) => {
    if (!fileList || fileList.length === 0) return [];
    const allowed = ["image/jpeg", "image/png", "image/jpg"];
    const files = Array.from(fileList).slice(0, 10);
    const urls = [];
    for (let i = 0; i < files.length; i++) {
      const f = files[i];
      if (!allowed.includes(f.type)) {
        await Swal.fire("Formato no permitido", `(${f.type}) Solo JPG/PNG.`, "warning");
        continue;
      }
      const ext = (f.name.split(".").pop() || "jpg").toLowerCase();
      const path = `novedades-img/${categoriaKey}/${docId}/imagen_${i + 1}.${ext}`;
      const ref = storageRef(storage, path);
      try {
        const snap = await uploadBytes(ref, f);
        const url = await getDownloadURL(snap.ref);
        urls.push(url);
      } catch (e) {
        console.error("Upload error", e);
        await Swal.fire("Error", "No se pudo subir una de las im√°genes.", "error");
      }
    }
    return urls;
  };

  const handleSubmit = async () => {
    if (!categoria) return;
    const data = {};
    data[OPERADOR_NAME[categoria]] = form.operador;
    data[LUGAR_NAME[categoria]] = form.lugar;
    data[EVENTO_NAME[categoria]] = form.evento;
    data.estado = (estado || "pendiente").toLowerCase();
    if (form.zona) data["zona-otros"] = form.zona;
    if (form.linkDrive) data["linkDrive"] = form.linkDrive;
    if (categoria === "tgs" && form.proveedorPersonal) data["proveedor-personal"] = form.proveedorPersonal;

    if (categoria === "edificios") {
      if (form.unidad) data["unidad"] = form.unidad;
      const eventoTime = eventoTimestampFromLocal(form.fechaHoraEvento);
      if (!eventoTime) return warn("Seleccion√° la fecha y hora del evento.");
      data.fechaHoraEvento = eventoTime.ts;
      data.fechaHoraEventoLocal = eventoTime.local;
      data.fechaHoraEventoISO = eventoTime.iso;
    }
    data.fechaHoraEnvio = getArgentinaTimestamp();

    // ‚úÖ Guardar Observaciones en su campo espec√≠fico (sin insertar SOP)
    const obsField =
      "observaciones-" + (categoria === "edificios" ? "edificios" : categoria);
    if (form.observaciones?.trim()) {
      data[obsField] = form.observaciones.trim();
    }

    const btn = document.querySelector(".nf__footer .nf__btn-primary");
    const old = btn?.textContent;
    if (btn) {
      btn.textContent = "Enviando...";
      btn.disabled = true;
    }

    try {
      const docRef = await addDoc(collection(db, `novedades/${categoria}/eventos`), data);
      if (form.imagenes?.length) {
        const urls = await subirImagenes(form.imagenes, categoria, docRef.id);
        if (urls.length) await updateDoc(docRef, { imagenes: urls });
      }

      // Alerta cr√≠tica VTV
      if (categoria === "vtv") {
        const planta = normalizar(data["planta-vtv"]);
        const evento = normalizar(data["evento-vtv"]);
        const plantasCrit = ["la plata", "olmos", "lanus", "berisso", "llavallol"];
        const eventosCrit = ["corte de energia electrica", "evento confirmado"];
        if (plantasCrit.some((k) => planta?.includes(k)) && eventosCrit.some((ev) => evento?.includes(ev))) {
          await Swal.fire({
            icon: "warning",
            title: "‚ö†Ô∏è AVISO INMEDIATO AL JEFE DE PLANTA",
            html: `<p style="text-align:left;margin:0">Debe informar <b>YA</b> al jefe de planta.</p>`,
            confirmButtonText: "Confirmar",
            confirmButtonColor: "#1e3c72",
            allowOutsideClick: false,
          });
        }
      }

      const portalBase = "https://reportesg3t.web.app/portal.html";
      const urlPend = `${portalBase}?estado=pendiente&categoria=${encodeURIComponent(categoria)}`;
      await Swal.fire({
        icon: "success",
        title: "Enviado",
        html: `
          <p style="margin:0 0 10px">
            Ticket <b>${(categoria || "").toUpperCase()}</b> enviado.<br>
            Estado: <b>${(data.estado || "pendiente").toUpperCase()}</b>
          </p>
          <a href="${urlPend}" target="_blank" rel="noopener" style="display:inline-block;padding:8px 12px;border-radius:6px;background:#2563eb;color:#fff;text-decoration:none;">üîó Ver pendientes</a>
        `,
      });

      // Reset m√≠nimo
      setStep(0);
      setCategoria(null);
      setEstado("pendiente");
      setSearch("");
      setForm({
        operador: "-",
        lugar: "-",
        evento: "-",
        fechaHoraEvento: "",
        unidad: "",
        zona: "",
        proveedorPersonal: "",
        linkDrive: "",
        observaciones: "",
        imagenes: null,
      });
      setSopCheck({});
    } catch (e) {
      console.error(e);
      Swal.fire("Error", "Hubo un problema al enviar los datos.", "error");
    } finally {
      if (btn) {
        btn.textContent = old || "Enviar";
        btn.disabled = false;
      }
    }
  };

  /* ====== UI ====== */

  const Progress = () => {
    const pct = (step / 4) * 100;
    const labels = ["Categor√≠a", "Lugar", "Evento", "Detalles", "Resumen"];
    return (
      <div className="nf__progress">
        <div className="nf__progress-bar" style={{ width: `${pct}%` }} />
        <div className="nf__progress-steps">
          {labels.map((l, i) => (
            <span key={l} className={`nf__progress-step ${i <= step ? "active" : ""}`}>{l}</span>
          ))}
        </div>
      </div>
    );
  };

  const CategoriaStep = () => (
    <section>
      <h3>Seleccion√° la categor√≠a</h3>
      <div className="nf__grid-cats">
        {["tgs", "vtv", "edificios", "barrios", "otros"].map((c) => (
          <button
            type="button"
            key={c}
            className={`nf__cat ${categoria === c ? "active" : ""}`}
            onClick={() => {
              setCategoria(c);
              setForm((f) => ({ ...f, operador: "-", lugar: "-", evento: "-", fechaHoraEvento: "", unidad: "" }));
              setSopCheck({});
            }}
          >
            {labelFor(c)}
          </button>
        ))}
      </div>
    </section>
  );

  const LugarStep = () => (
    <section>
      <h3>Datos b√°sicos</h3>
      <Label>Operador</Label>
      <select value={form.operador} onChange={(e) => setForm((f) => ({ ...f, operador: e.target.value }))}>
        <option>-</option>
        {OPERADORES.map((o) => <option key={o}>{o}</option>)}
      </select>

      <Label>{LUGAR_LABEL[categoria]}</Label>
      <input
        type="text"
        placeholder="Buscar‚Ä¶"
        value={search}
        onChange={(e) => setSearch(e.target.value)}
        className="nf__search"
      />
      <select value={form.lugar} onChange={(e) => setForm((f) => ({ ...f, lugar: e.target.value }))}>
        <option>-</option>
        {opcionesLugar.map((n) => <option key={n} value={n}>{n}</option>)}
      </select>
    </section>
  );

  const EventoStep = () => (
    <section>
      <h3>Tipo de evento</h3>
      <div className="nf__chips">
        {EVENTOS[categoria].slice(0, 4).map((ev) => (
          <button
            type="button"
            key={ev}
            className={`nf__chip ${form.evento === ev ? "active" : ""}`}
            onClick={() => onSelectEvento(ev)}
          >
            {ev}
          </button>
        ))}
      </div>

      <Label>Seleccion√° el evento</Label>
      <select value={form.evento} onChange={(e) => onSelectEvento(e.target.value)}>
        <option>-</option>
        {EVENTOS[categoria].map((ev) => <option key={ev}>{ev}</option>)}
      </select>

      {categoria === "edificios" && (
        <>
          <Label>Fecha y hora reales del evento</Label>
          <input
            type="datetime-local"
            value={form.fechaHoraEvento}
            onChange={(e) => setForm((f) => ({ ...f, fechaHoraEvento: e.target.value }))}
          />
          <small className="nf__muted">Este dato corresponde al momento real del evento.</small>

          <Label>Unidad involucrada (opcional)</Label>
          <select value={form.unidad} onChange={(e) => setForm((f) => ({ ...f, unidad: e.target.value }))}>
            <option value="">Seleccione una unidad</option>
            {generateUnidadOptions().map((u) => <option key={u} value={u}>{u}</option>)}
          </select>
        </>
      )}
    </section>
  );

  const onSelectEvento = (ev) => {
    setForm((f) => ({ ...f, evento: ev }));
    if (!sopCheck[ev]) {
      const base = SOP[ev];
      if (base) {
        setSopCheck((prev) => ({
          ...prev,
          [ev]: { pasos: new Array(base.pasos.length).fill(false), registro: new Array(base.registro.length).fill(false) },
        }));
      }
    }
  };

  const DetallesStep = () => (
    <section>
      <h3>Detalles (opcionales)</h3>

      <div className="grid-2">
        <div>
          <Label>Zona / Canal CCTV</Label>
          <input
            type="text"
            placeholder="Ej: ZONA 5 PERSIANA 4 PB ‚Äî o CANAL 18"
            value={form.zona}
            onChange={(e) => setForm((f) => ({ ...f, zona: e.target.value }))}
          />
        </div>

        <div>
          <Label>Enlace a Im√°genes (Drive)</Label>
          <input
            type="url"
            placeholder="https://..."
            value={form.linkDrive}
            onChange={(e) => setForm((f) => ({ ...f, linkDrive: e.target.value }))}
          />
        </div>
      </div>

      {categoria === "tgs" && (
        <>
          <Label>Proveedor / Personal (si aplica)</Label>
          <input
            type="text"
            placeholder="Ej: Juan P√©rez"
            value={form.proveedorPersonal}
            onChange={(e) => setForm((f) => ({ ...f, proveedorPersonal: e.target.value }))}
          />
        </>
      )}

      <Label>Observaciones</Label>
      <textarea
        placeholder="Agreg√° un resumen breve de lo sucedido‚Ä¶"
        value={form.observaciones}
        onChange={(e) => setForm((f) => ({ ...f, observaciones: e.target.value }))}
      />

      <Label>Subir Im√°genes (m√°x. 10)</Label>
      <input
        type="file"
        multiple
        accept="image/*"
        onChange={(e) => setForm((f) => ({ ...f, imagenes: e.target.files }))}
      />
    </section>
  );

  const ResumenStep = () => (
    <section>
      <h3>Resumen</h3>
      <div className="nf__summary">
        <Row k="Categor√≠a" v={labelFor(categoria)} />
        <Row k="Operador" v={form.operador} />
        <Row k="Lugar" v={form.lugar} />
        <Row k="Evento" v={form.evento} />
        {categoria === "edificios" && (
          <>
            <Row k="Fecha/Hora Evento" v={form.fechaHoraEvento || "-"} />
            <Row k="Unidad" v={form.unidad || "-"} />
          </>
        )}
        <Row k="Zona/Canal" v={form.zona || "-"} />
        <Row k="Link Drive" v={form.linkDrive || "-"} />
        {categoria === "tgs" && <Row k="Proveedor/Personal" v={form.proveedorPersonal || "-"} />}
        <Row k="Observaciones" v={form.observaciones || "-"} />
        <Row k="Estado" v={estado.toUpperCase()} />
        <Row k="Im√°genes" v={form.imagenes?.length ? `${form.imagenes.length} archivos` : "‚Äî"} />
      </div>

      <div style={{ marginTop: 12 }}>
        <Label>Estado</Label>
        <select value={estado} onChange={(e) => setEstado(e.target.value)}>
          <option value="pendiente">Pendiente</option>
          <option value="procesado">Procesado</option>
        </select>
        <small className="nf__muted">
          Dejalo en <b>Pendiente</b> si lo quer√©s retomar m√°s tarde desde el portal.
        </small>
      </div>
    </section>
  );

  return (
    <div className="nf">
      <div className="nf__container">
        <h2 className="nf__title">Novedades / Reportes de Monitoreo</h2>
        <Progress />

        {/* Layout: formulario + SOP */}
        <div className="nf__layout">
          <form onSubmit={(e) => e.preventDefault()} className="nf__form">
            {step === 0 && <CategoriaStep />}
            {step === 1 && categoria && <LugarStep />}
            {step === 2 && categoria && <EventoStep />}
            {step === 3 && categoria && <DetallesStep />}
            {step === 4 && categoria && <ResumenStep />}

            <div className="nf__footer">
              <div className="nf__footer-hint">
                <span>‚Ü©Ô∏é Enter = Siguiente ¬∑ ‚áß Enter / Esc = Atr√°s</span>
              </div>
              <div className="nf__footer-actions">
                <button type="button" className="nf__btn" onClick={handleBack} disabled={step === 0}>
                  ‚¨Ö Atr√°s
                </button>
                {step < 4 && (
                  <button type="button" className="nf__btn-primary" onClick={handleNext}>
                    Siguiente ‚ûú
                  </button>
                )}
                {step === 4 && (
                  <button type="button" className="nf__btn-primary" onClick={handleSubmit}>
                    Enviar ‚úî
                  </button>
                )}
              </div>
            </div>
          </form>

          {/* Panel SOP (sin botones de copiar/insertar) */}
          <SOPPanel
            evento={form.evento}
            sop={currentSOP}
            check={sopCheck[form.evento]}
            onCheckChange={(idx, type) => {
              setSopCheck((prev) => {
                const cur = prev[form.evento] || { pasos: [], registro: [] };
                const arr = [...cur[type]];
                arr[idx] = !arr[idx];
                return { ...prev, [form.evento]: { ...cur, [type]: arr } };
              });
            }}
          />
        </div>
      </div>
    </div>
  );
}

/* ====== SOP Panel ====== */
function SOPPanel({ evento, sop, check, onCheckChange }) {
  const [timer, setTimer] = useState(null); // {secLeft, label}
  useEffect(() => { setTimer(null); }, [evento]);

  if (!evento || !sop) {
    return (
      <aside className="sop">
        <div className="sop__empty">
          <div className="sop__emoji">üëà</div>
          <div>
            <h4>Gu√≠a operativa</h4>
            <p>Eleg√≠ un <b>evento</b> para ver el procedimiento recomendado.</p>
          </div>
        </div>
      </aside>
    );
  }

  const startTimer = (sec, label) => {
    setTimer({ secLeft: sec, label });
    const int = setInterval(() => {
      setTimer((t) => {
        if (!t) { clearInterval(int); return null; }
        if (t.secLeft <= 1) {
          clearInterval(int);
          Swal.fire("Tiempo cumplido", label, "info");
          return null;
        }
        return { ...t, secLeft: t.secLeft - 1 };
      });
    }, 1000);
  };

  return (
    <aside className="sop">
      <div className="sop__header">
        <div>
          <h4>{evento}</h4>
          <p className="sop__def">{sop.def}</p>
          {sop?.quick?.warn && <div className="sop__warn">{sop.quick.warn}</div>}
        </div>
      </div>

      <div className="sop__content">
        <div className="sop__block">
          <div className="sop__title">Pasos sugeridos</div>
          <ul className="sop__list">
            {sop.pasos.map((p, i) => (
              <li key={i} className={`sop__step ${check?.pasos?.[i] ? "done" : ""}`}>
                <label>
                  <input
                    type="checkbox"
                    checked={!!check?.pasos?.[i]}
                    onChange={() => onCheckChange(i, "pasos")}
                  />
                  <span>{p}</span>
                </label>
              </li>
            ))}
          </ul>
        </div>

        <div className="sop__block">
          <div className="sop__title">Registrar</div>
          <ul className="sop__list">
            {sop.registro.map((r, i) => (
              <li key={i} className={`sop__step ${check?.registro?.[i] ? "done" : ""}`}>
                <label>
                  <input
                    type="checkbox"
                    checked={!!check?.registro?.[i]}
                    onChange={() => onCheckChange(i, "registro")}
                  />
                  <span>{r}</span>
                </label>
              </li>
            ))}
          </ul>
        </div>

      {sop?.quick?.timers?.length ? (
  <div className="sop__block">
    <div className="sop__title sop__title--strong">Temporizadores</div>
    <div className="sop__timers">
      {sop.quick.timers.map(({ sec, label }, i) => {
        const pretty =
          sec >= 60 ? `${Math.round(sec / 60)} min` : `${sec}s`;
        const text = (label && label.trim()) ? label : pretty;
        return (
          <button
            key={i}
            type="button"
            className="sop__btn sop__btn--hc"
            title={`${text} ‚Ä¢ ${pretty}`}
            onClick={() => startTimer(sec, label)}
            aria-label={`Iniciar temporizador: ${text}`}
          >
            <span className="sop__btn-ico">‚è±</span>
            <span className="sop__btn-txt">{text}</span>
            <span className="sop__btn-sub">({pretty})</span>
          </button>
        );
      })}
      {timer && (
        <div className="sop__timer sop__timer--hc">
          ‚è≥ <span className="sop__timer-label">{timer.label}</span>:
          <b className="sop__timer-digits">{fmt(timer.secLeft)}</b>
        </div>
      )}
    </div>
  </div>
) : (
  <div className="sop__no-timers sop__no-timers--hc">
    <p>‚öôÔ∏è No hay temporizadores disponibles en este procedimiento.</p>
  </div>
)}


      </div>
    </aside>
  );
}

/* ====== Helpers UI ====== */
function Label({ children }) { return <label>{children}</label>; }
function Row({ k, v }) { return (<div className="nf__row"><span className="nf__row-k">{k}</span><span className="nf__row-v">{v}</span></div>); }
function labelFor(k) {
  switch (k) { case "tgs": return "TGS"; case "vtv": return "VTV"; case "edificios": return "Edificios"; case "barrios": return "Barrios"; case "otros": return "Otros"; default: return k || "-"; }
}
function generateUnidadOptions() {
  const out = [], pisos = 12, unidadesPorPiso = 5, letras = ["A","B","C","D","E","F","G"], prefNum = ["Cochera","Local","Port√≥n","Piso"], esp = 20, √∫nicos = ["Encargado","Sala de Maquinas","SUM","Bunker"];
  for (let p=1;p<=pisos;p++) for (let u=1;u<=unidadesPorPiso;u++) out.push(`${p}${String(u).padStart(2,"0")}`);
  for (let p=1;p<=pisos;p++) letras.forEach(L=>out.push(`${p}${L}`));
  for (let p=1;p<=pisos;p++) for (let u=1;u<=unidadesPorPiso;u++) out.push(`${p}-${u}`);
  prefNum.forEach(pre=>{ for (let n=1;n<=esp;n++) out.push(`${pre} ${n}`);});
  √∫nicos.forEach(x=>out.push(x));
  return out;
}
function fmt(sec) {
  const m = Math.floor(sec / 60), s = sec % 60;
  return `${String(m).padStart(2,"0")}:${String(s).padStart(2,"0")}`;
}
